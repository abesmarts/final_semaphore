services:
  # Elasticsearch - Data storage and search engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.4
    container_name: elasticsearch
    environment:
        - discovery.type=single-node
        - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
        - xpack.security.enabled=false
        - xpack.security.enrollment.enabled=false
    volumes:
      - ../elasticsearch_:/usr/share/elasticsearch/data
      - ../elasticsearch/config/elasticsearch.yaml:/usr/share/elasticsearch/config/elasticsearch.yaml:ro
      
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana - Data visualization and dashboard interface
  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    volumes:
      - ../kibana/config/kibana.yaml:/usr/share/kibana/config/kibana.yaml:ro
      - kibana_:/usr/share/kibana/data
    ports:
      - "5601:5601"
    networks:
      - monitoring-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash - Data processing pipeline (main data processor)
  logstash:
    image: docker.elastic.co/logstash/logstash:9.0.4
    container_name: logstash
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms1g"
    volumes:
      - ../logstash/config/logstash.yaml:/usr/share/logstash/config/logstash.yaml:ro
      - ../logstash/config/logstash.conf:/usr/share/logstash/config/logstash.conf
      # - logstash/config/logstash.yaml:/usr/share/logstash/config/logstash.yaml:ro
    ports:
      - "5044:5044"  # Beats input (receives from Filebeat)
      - "9600:9600"  # API port
      - "5000:5000/tcp"  # HTTP input (receives from Python scripts)
      - "5000:5000/udp"
    networks:
      - monitoring-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

   # Filebeat - Lightweight log shipper
  filebeat:
    image: docker.elastic.co/beats/filebeat:9.0.4
    container_name: filebeat
    user: root
    command: filebeat -e --strict.perms=false
    environment:
      - setup.kibana.host=kibana:5601
      - output.logstash.hosts=["logstash:5044"]
    volumes:
      - ../filebeat/config/filebeat.yaml:/usr/share/filebeat/config/filebeat.yaml:ro
      - ../filebeat_:/usr/share/filebeat/data
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/var/log:ro
    networks:
      - monitoring-network
    depends_on:
      logstash:
        condition: service_healthy
    restart: unless-stopped

  # Semaphore UI - Automation management interface
  # semaphore:
  #   image: semaphoreui/semaphore:v2.15.0
  #   container_name: semaphore-ui
  #   environment:
  #     - SEMAPHORE_DB_DIALECT=bolt
  #     - SEMAPHORE_ADMIN_PASSWORD=SecurePassword123!
  #     - SEMAPHORE_ADMIN_NAME=Admin
  #     - SEMAPHORE_ADMIN_EMAIL=admin@yourcompany.com
  #     - SEMAPHORE_ADMIN=admin
  #     - SEMAPHORE_ACCESS_KEY_ENCRYPTION=pOadmaxkaFP6FF0MM4qLU6nEa9TkfrfllJP+VnEqN0o=
  #   volumes:
  #     # - semaphore/config:/etc/semaphore/config
  #     # - semaphore/ansible:/var/lib/semaphore/ansible
  #     - data:/var/lib/semaphore
  #     - config:/etc/semaphore
  #     - tmp:/tmp/semaphore
  #     - semaphore/ansible:/var/lib/semaphore/ansible
  #     - ../terraform:/var/lib/semaphore/terraform
  #     - ../python-scripts:/var/lib/semaphore/scripts
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - monitoring-network
  #   restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_USER: semaphore
      MYSQL_PASSWORD: semaphore
      MYSQL_DATABASE: semaphore
      MYSQL_RANDOM_ROOT_PASSWORD: yes
    volumes:
      - mysql_:/var/lib/mysql
      - ./init-mysql.sql:/docker-entrypoint-initdb.d/init-mysql.sql:ro
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "semaphore", "-psemaphore"]
      timeout: 10s
      retries: 5
      interval: 30s
    labels:
      - "filebeat_ingest=true"

  semaphore:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: semaphore
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      SEMAPHORE_DB_DIALECT: mysql
      SEMAPHORE_DB_HOST: mysql
      SEMAPHORE_DB_NAME: semaphore
      SEMAPHORE_DB_USER: semaphore
      SEMAPHORE_DB_PASS: semaphore
      SEMAPHORE_ADMIN: admin
      SEMAPHORE_ADMIN_PASSWORD: semaphorepassword
      SEMAPHORE_ADMIN_NAME: admin
      SEMAPHORE_ADMIN_EMAIL: admin@localhost
      SEMAPHORE_PLAYBOOK_PATH: /tmp/semaphore/
      # Enhanced logging configuration
      SEMAPHORE_EVENT_LOG_ENABLED: "true"
      SEMAPHORE_EVENT_LOG_PATH: /var/log/semaphore/events.log
      SEMAPHORE_TASK_LOG_ENABLED: "true"
      SEMAPHORE_TASK_LOG_PATH: /var/log/semaphore/tasks.log
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./ansible:/mnt/localproject/ansible:ro
      - ../terraform:/mnt/localproject/terraform:ro
      - ../python-scripts:/mnt/localproject/scripts
      - semaphore_:/tmp/semaphore
      - semaphore_logs:/var/log/semaphore
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/ping"]
      timeout: 10s
      retries: 5
      interval: 30s
    labels:
      - "filebeat_ingest=true"

volumes:
  mysql_:
    driver: local
  semaphore_:
    driver: local
  semaphore_logs:
    driver: local
  elasticsearch_:
    driver: local
  kibana_:
    driver: local
  filebeat_:
    driver: local

networks:
  monitoring-network:
    driver: bridge
    external: false

  # elasticsearch:
  #   driver: local
  # data:
  #   driver: local
  # config:
  #   driver: local
  # tmp:
  #   driver: local
  # filebeat:
  #   driver: local
  # logstash:
  #   driver: local
  # ansible:
  #   driver: local
  # terraform:
  #   driver: local
  # python-scripts: 
  #   driver: local
